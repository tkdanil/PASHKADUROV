from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from utils.ssh_client import SSHClient
from db.models import User
import paramiko


class BotLogic:
    def __init__(self, session: AsyncSession):
        self.session = session

    async def register_user(self, telegram_id: int, username: str) -> str:
        user = await self.session.scalar(select(User).where(User.telegram_id == telegram_id))
        if user:
            return "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!"
        self.session.add(User(telegram_id=telegram_id, username=username))
        await self.session.commit()
        return f"–ü—Ä–∏–≤–µ—Ç, {username}! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã."

    async def get_user_status(self, telegram_id: int) -> str:
        user = await self.session.scalar(select(User).where(User.telegram_id == telegram_id))
        if not user:
            return "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start."
        status = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}\n"
        if user.vm_ip and user.vm_username:
            status += f"–í–ú: {user.vm_ip} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.vm_username})"
        else:
            status += "–í–ú –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /vmpath."
        return status

    async def save_vm_path(self, telegram_id: int, ip: str, username: str, password: str) -> str:
        user = await self.session.scalar(select(User).where(User.telegram_id == telegram_id))
        if not user:
            return "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start."
        user.vm_ip = ip
        user.vm_username = username
        user.vm_password = password
        await self.session.commit()
        return f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –í–ú —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {ip}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}"

    async def check_vm_connection(self, telegram_id: int) -> str:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –í–ú —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
        user = await self.session.scalar(select(User).where(User.telegram_id == telegram_id))
        if not user or not all([user.vm_ip, user.vm_username, user.vm_password]):
            return "–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –í–ú —á–µ—Ä–µ–∑ /vmpath."

        try:
            with SSHClient(user.vm_ip, user.vm_username, user.vm_password) as ssh:
                return "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –í–ú —É—Å–ø–µ—à–Ω–æ!"
        except paramiko.AuthenticationException:
            return "‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å."
        except paramiko.SSHException as e:
            return f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å SSH: {e}. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –ø–∞—Ä–æ–ª—é."
        except TimeoutError:
            return f"‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {user.vm_ip} –∑–∞ 10 —Å–µ–∫—É–Ω–¥ (timeout)."
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ IP-–∞–¥—Ä–µ—Å –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞."

    async def list_home_dir(self, telegram_id: int) -> str:
        """–í—ã–≤–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ–º–∞—à–Ω–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
        user = await self.session.scalar(select(User).where(User.telegram_id == telegram_id))
        if not user or not all([user.vm_ip, user.vm_username, user.vm_password]):
            return "–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –í–ú —á–µ—Ä–µ–∑ /vmpath."

        try:
            with SSHClient(user.vm_ip, user.vm_username, user.vm_password) as ssh:
                out, err = ssh.exec_command('ls -la ~')
                if err:
                    return f"‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π: {err}"
                return f"üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞:\n```\n{out}\n```"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞: {e}"

    async def cat_text_files(self, telegram_id: int) -> str:
        """–í—ã–≤–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
        user = await self.session.scalar(select(User).where(User.telegram_id == telegram_id))
        if not user or not all([user.vm_ip, user.vm_username, user.vm_password]):
            return "–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –í–ú —á–µ—Ä–µ–∑ /vmpath."

        try:
            with SSHClient(user.vm_ip, user.vm_username, user.vm_password) as ssh:
                find_cmd = "find ~ -maxdepth 1 -type f -name '*.txt'"
                out, err = ssh.exec_command(find_cmd)
                if err:
                    return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {err}"
                files = [f.strip() for f in out.splitlines() if f.strip()]
                if not files:
                    return "üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (.txt) –≤ –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
                result = []
                for file in files:
                    file_out, file_err = ssh.exec_command(f'cat "{file}"')
                    if file_err:
                        result.append(f"\n--- üìÑ {file} (–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è) ---\n{file_err}")
                    else:
                        result.append(f"\n--- üìÑ {file} ---\n{file_out}")
                return "üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤:\n" + "".join(result)
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞: {e}"